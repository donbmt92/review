import { NextResponse } from 'next/server';
import { db } from '../../../lib/db';

export async function POST() {
  try {
    // 1. Ki·ªÉm tra xem danh m·ª•c Pets ƒë√£ t·ªìn t·∫°i ch∆∞a
    let petsCategory = await db.category.findUnique({
      where: { slug: 'pets' }
    });

    if (!petsCategory) {
      // T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
      petsCategory = await db.category.create({
        data: {
          name: 'Pets',
          slug: 'pets',
          icon: 'üêï',
        }
      });
      console.log('ƒê√£ t·∫°o danh m·ª•c Pets m·ªõi:', petsCategory);
    } else {
      console.log('Danh m·ª•c Pets ƒë√£ t·ªìn t·∫°i:', petsCategory);
      
      // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈© trong danh m·ª•c n√†y
      const oldProducts = await db.product.findMany({
        where: { categoryId: petsCategory.id },
        select: { id: true }
      });
      
      if (oldProducts.length > 0) {
        const productIds = oldProducts.map(p => p.id);
        
        // X√≥a highlights, offers, review metadata tr∆∞·ªõc
        await db.highlight.deleteMany({
          where: { productId: { in: productIds } }
        });
        await db.offer.deleteMany({
          where: { productId: { in: productIds } }
        });
        await db.reviewMeta.deleteMany({
          where: { productId: { in: productIds } }
        });
        
        // Sau ƒë√≥ x√≥a s·∫£n ph·∫©m
        await db.product.deleteMany({
          where: { categoryId: petsCategory.id }
        });
      }
      console.log('ƒê√£ x√≥a d·ªØ li·ªáu c≈© trong danh m·ª•c Pets');
    }

    // 2. T·∫°o c√°c s·∫£n ph·∫©m th√∫ c∆∞ng
    const products = [
      {
        title: 'Royal Canin Adult Dog Food',
        imageUrl: '/categories/pets.png',
        score: 9.2,
        categoryId: petsCategory.id,
        rank: 1,
        badge: 'Best Overall',
        reviewsCount: 1250,
        boughtNote: '10K+ bought in past month',
        discount: 'Save 15%',
        retailer: 'Amazon',
        list: {
          pros: ['Ch·∫•t l∆∞·ª£ng cao', 'Ph√π h·ª£p m·ªçi l·ª©a tu·ªïi', 'Gi√° t·ªët'],
          cons: ['H∆°i ƒë·∫Øt', 'C·∫ßn th·ªùi gian th√≠ch nghi']
        }
      },
      {
        title: 'Frisco Cat Scratching Post',
        imageUrl: '/categories/pets.png',
        score: 8.8,
        categoryId: petsCategory.id,
        rank: 2,
        badge: 'Best Value',
        reviewsCount: 890,
        boughtNote: '5K+ bought in past month',
        discount: 'Save 20%',
        retailer: 'Chewy',
        list: {
          pros: ['Gi√° r·∫ª', 'D·ªÖ l·∫Øp r√°p', 'M√®o th√≠ch'],
          cons: ['Ch·∫•t li·ªáu trung b√¨nh', 'Kh√¥ng b·ªÅn l·∫Øm']
        }
      },
      {
        title: 'PetSafe Wireless Dog Fence',
        imageUrl: '/categories/pets.png',
        score: 9.0,
        categoryId: petsCategory.id,
        rank: 3,
        badge: 'Premium Choice',
        reviewsCount: 650,
        boughtNote: '2K+ bought in past month',
        discount: 'Free shipping',
        retailer: 'PetSmart',
        list: {
          pros: ['C√¥ng ngh·ªá ti√™n ti·∫øn', 'D·ªÖ s·ª≠ d·ª•ng', 'Hi·ªáu qu·∫£ cao'],
          cons: ['Gi√° cao', 'C·∫ßn th·ªùi gian hu·∫•n luy·ªán']
        }
      },
      {
        title: 'Kong Classic Dog Toy',
        imageUrl: '/categories/pets.png',
        score: 8.5,
        categoryId: petsCategory.id,
        rank: 4,
        badge: 'Popular',
        reviewsCount: 2100,
        boughtNote: '15K+ bought in past month',
        discount: 'Buy 2 Get 1 Free',
        retailer: 'Amazon',
        list: {
          pros: ['B·ªÅn b·ªâ', 'An to√†n cho ch√≥', 'Gi√° h·ª£p l√Ω'],
          cons: ['M·ªôt s·ªë ch√≥ kh√¥ng th√≠ch', 'C√≥ th·ªÉ b·ªã nhai n√°t']
        }
      },
      {
        title: 'Arm & Hammer Cat Litter',
        imageUrl: '/categories/pets.png',
        score: 8.7,
        categoryId: petsCategory.id,
        rank: 5,
        badge: 'Best Seller',
        reviewsCount: 1800,
        boughtNote: '20K+ bought in past month',
        discount: 'Save 25%',
        retailer: 'Walmart',
        list: {
          pros: ['Kh·ª≠ m√πi t·ªët', 'Gi√° r·∫ª', 'D·ªÖ t√¨m'],
          cons: ['B·ª•i nhi·ªÅu', 'C·∫ßn thay th∆∞·ªùng xuy√™n']
        }
      }
    ];

    const createdProducts = [];

    // T·∫°o t·ª´ng s·∫£n ph·∫©m
    for (const productData of products) {
      const product = await db.product.create({
        data: {
          title: productData.title,
          imageUrl: productData.imageUrl,
          score: productData.score,
          categoryId: productData.categoryId,
          rank: productData.rank,
          badge: productData.badge,
          reviewsCount: productData.reviewsCount,
          boughtNote: productData.boughtNote,
          discount: productData.discount,
          retailer: productData.retailer,
          list: productData.list
        }
      });

      createdProducts.push(product);

      // T·∫°o highlights cho s·∫£n ph·∫©m
      if (productData.list?.pros) {
        for (const highlight of productData.list.pros) {
          await db.highlight.create({
            data: {
              text: highlight,
              productId: product.id
            }
          });
        }
      }

      // T·∫°o offers cho s·∫£n ph·∫©m
      await db.offer.create({
        data: {
          retailer: productData.retailer,
          url: `https://${productData.retailer.toLowerCase()}.com/search?q=${encodeURIComponent(productData.title)}`,
          badge: productData.discount,
          discount: productData.discount,
          productId: product.id
        }
      });

      // T·∫°o review metadata
      await db.reviewMeta.create({
        data: {
          reviewsCount: productData.reviewsCount,
          boughtNote: productData.boughtNote,
          productId: product.id
        }
      });
    }

    return NextResponse.json({
      success: true,
      message: 'ƒê√£ t·∫°o xong d·ªØ li·ªáu cho danh m·ª•c Pets!',
      data: {
        category: petsCategory,
        products: createdProducts,
        totalProducts: createdProducts.length
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: 'L·ªói khi t·∫°o d·ªØ li·ªáu',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
