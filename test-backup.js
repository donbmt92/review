const { PrismaClient } = require('@prisma/client');

async function testBackup() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu trong database production...');
    
    // Ki·ªÉm tra offers
    const offers = await prisma.offer.findMany({
      take: 5,
      include: {
        product: {
          select: {
            title: true
          }
        }
      }
    });
    
    console.log(`üì¶ T·ªïng s·ªë offers: ${await prisma.offer.count()}`);
    console.log('M·ªôt s·ªë offers m·∫´u:');
    offers.forEach(offer => {
      console.log(`- ${offer.retailer}: ${offer.url} (${offer.product.title})`);
    });
    
    // Ki·ªÉm tra highlights
    const highlights = await prisma.highlight.findMany({
      take: 5,
      include: {
        product: {
          select: {
            title: true
          }
        }
      }
    });
    
    console.log(`\n‚ú® T·ªïng s·ªë highlights: ${await prisma.highlight.count()}`);
    console.log('M·ªôt s·ªë highlights m·∫´u:');
    highlights.forEach(highlight => {
      console.log(`- ${highlight.text.substring(0, 50)}... (${highlight.product.title})`);
    });
    
    // Ki·ªÉm tra reviewMeta
    const reviewMeta = await prisma.reviewMeta.findMany({
      take: 3,
      include: {
        product: {
          select: {
            title: true
          }
        }
      }
    });
    
    console.log(`\nüìä T·ªïng s·ªë reviewMeta: ${await prisma.reviewMeta.count()}`);
    console.log('M·ªôt s·ªë reviewMeta m·∫´u:');
    reviewMeta.forEach(meta => {
      console.log(`- Reviews: ${meta.reviewsCount}, Bought: ${meta.boughtNote} (${meta.product.title})`);
    });
    
    // Ki·ªÉm tra newsletter subscriptions
    const newsletterCount = await prisma.newsletterSubscription.count();
    console.log(`\nüìß Newsletter subscriptions: ${newsletterCount}`);
    
  } catch (error) {
    console.error('‚ùå L·ªói ki·ªÉm tra:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testBackup();
